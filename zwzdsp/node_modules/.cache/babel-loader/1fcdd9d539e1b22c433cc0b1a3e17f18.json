{"ast":null,"code":"import axios from 'axios';\nimport store from '@/store';\nimport { Loading } from 'element-ui';\n// 根据环境不同引入不同api地址\nimport { baseApi } from '@/config';\n// create an axios instance\nconst service = axios.create({\n  baseURL: baseApi,\n  // url = base api url + request url\n  withCredentials: true,\n  // send cookies when cross-domain requests\n  timeout: 5000 // request timeout\n});\n\n// request拦截器 request interceptor\nservice.interceptors.request.use(config => {\n  // 不传递默认开启loading\n  if (!config.hideloading) {\n    // loading\n    Loading.service({\n      fullscreen: true\n    });\n  }\n  if (store.getters.token) {\n    config.headers['X-Token'] = '';\n  }\n  return config;\n}, error => {\n  // do something with request error\n  console.log(error); // for debug\n  return Promise.reject(error);\n});\n// respone拦截器\nservice.interceptors.response.use(response => {\n  Loading.service({\n    fullscreen: true\n  }).close();\n  const res = response.data;\n  if (res.status && res.status !== 200) {\n    // 登录超时,重新登录\n    if (res.status === 401) {\n      store.dispatch('FedLogOut').then(() => {\n        location.reload();\n      });\n    }\n    return Promise.reject(res || 'error');\n  } else {\n    return Promise.resolve(res);\n  }\n}, error => {\n  Loading.service({\n    fullscreen: true\n  }).close();\n  console.log('err' + error); // for debug\n  return Promise.reject(error);\n});\nexport default service;","map":null,"metadata":{},"sourceType":"module"}