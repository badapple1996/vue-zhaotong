{"ast":null,"code":"Math.easeInOutQuad = function (t, b, c, d) {\n  t /= d / 2;\n  if (t < 1) {\n    return c / 2 * t * t + b;\n  }\n  t--;\n  return -c / 2 * (t * (t - 2) - 1) + b;\n};\n\n// requestAnimationFrame for Smart Animating http://goo.gl/sx5sts\nvar requestAnimFrame = function () {\n  return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (callback) {\n    window.setTimeout(callback, 1000 / 60);\n  };\n}();\n\n/**\r\n * Because it's so fucking difficult to detect the scrolling element, just move them all\r\n * @param {number} amount\r\n */\nfunction move(amount) {\n  document.documentElement.scrollTop = amount;\n  document.body.parentNode.scrollTop = amount;\n  document.body.scrollTop = amount;\n}\nfunction position() {\n  return document.documentElement.scrollTop || document.body.parentNode.scrollTop || document.body.scrollTop;\n}\n\n/**\r\n * @param {number} to\r\n * @param {number} duration\r\n * @param {Function} callback\r\n */\nexport function scrollTo(to, duration, callback) {\n  const start = position();\n  const change = to - start;\n  const increment = 20;\n  let currentTime = 0;\n  duration = typeof duration === 'undefined' ? 500 : duration;\n  var animateScroll = function () {\n    // increment the time\n    currentTime += increment;\n    // find the value with the quadratic in-out easing function\n    var val = Math.easeInOutQuad(currentTime, start, change, duration);\n    // move the document.body\n    move(val);\n    // do the animation unless its over\n    if (currentTime < duration) {\n      requestAnimFrame(animateScroll);\n    } else {\n      if (callback && typeof callback === 'function') {\n        // the animation is done so lets callback\n        callback();\n      }\n    }\n  };\n  animateScroll();\n}","map":null,"metadata":{},"sourceType":"module"}